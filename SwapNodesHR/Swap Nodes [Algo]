#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

typedef struct node
{
    int val;
    struct node * left;
    struct node * right;
}Node;

void printarr(vector<int> a)
{
    cout << endl;
    for(int i=0; i<a.size(); i++)
    {
        cout << a[i] << " ";
    }
    cout << endl;
}

Node * newNode(int v)
{
    Node *n = new Node;
    n->val = v;
    n->left = n->right = NULL;
    return n;
}

Node* constructTree(vector<int> a)
{
    queue<Node *> q;
    Node *root = newNode(a[0]);
    q.push(root);
    Node *cur = NULL;
    if(a.size() == 1)
        return root;
    for(int i=1; (i<a.size()) && (!q.empty()); i++)
    {
        cur = q.front();
        q.pop();
        Node *lt = NULL, *rt = NULL;
        if(-1 != a[i])
            lt = newNode(a[i]);

        if((i+1) < a.size())
        {   
            if(-1 != a[i+1])
                rt = newNode(a[i+1]);
            i++;
        }
        cur->left = lt;
        cur->right = rt;
        if(lt)
            q.push(lt);
        if(rt)
            q.push(rt);
    }
    return root;
}

void inorder(Node *root)
{
    if((NULL == root))
        return;
    inorder(root->left);
    cout << root->val << " ";
    inorder(root->right);
}

void treeSwap(Node *root, int cur, int k)
{
    if(NULL == root)
        return;
    if(0 == (cur%k))
    {
        Node *temp = root->left;
        root->left = root->right;
        root->right = temp;
    }
    treeSwap(root->left, cur+1, k);
    treeSwap(root->right, cur+1, k);
}

int main()
{
    Node * root;

    int N;
    cin >> N;
    vector<int> arr(2*N+1);
    arr[0] = 1;
    for(int i=1; i<=2*N; i++)
    {
        cin >> arr[i];
    }
    
    int T;
    cin >> T;
    
    //cout << "T=" << T << endl;
    
    queue<int> q;
    root = constructTree(arr);
    
    //inorder(root);
    //cout << endl;

    for(int i=0; i<T; i++)
    {
        int k;
        cin >> k;
        //cout << "K=" << k << endl;
        treeSwap(root, 1, k);
        inorder(root);
        cout << endl;
    }
    return 0;
}
